"""
Django settings for base project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-pq$a8yj39c^b(c!mxghed^jfj$8$)q3^wlhzeb_f&(b&=-r^th'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # third party apps
    "rest_framework",
    "django_celery_beat",
    "django_filters",
    "bootstrap4",

    # custom apps
    "api",
    "jobs",
    "users",
    "filters",

    "search",
    "tasks",
    'monitor',
    'corsheaders',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'base.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'base.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'job_alerts',
        'USER': 'postgres',
        'PASSWORD': '123123',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Celery Configuration
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_TASK_SOFT_TIME_LIMIT = 60
CELERY_WORKER_MAX_TASKS_PER_CHILD = 50
CELERY_WORKER_CONCURRENCY = 1

# Job Filtering Settings
ALLOWED_INDUSTRIES = {
    'NGO / Non-Profit Associations',
}

TECH_JOB_TITLES = {
    'Software Engineer', 'Software Developer', 'Full Stack Developer',
    'Backend Developer', 'Frontend Developer', 'Web Developer',
    'Application Developer', 'Junior Software Developer',
    'Mid-Level Software Developer', 'Senior Software Engineer',
    'Lead Software Engineer', 'Principal Software Engineer',
    'Staff Software Engineer', 'Engineering Manager',
    'Director of Engineering', 'VP of Engineering',
    'Chief Technology Officer', 'CTO',
    'Backend Engineer', 'API Developer', 'Server-Side Developer',
    'Cloud Backend Engineer', 'Distributed Systems Engineer',
    'Frontend Engineer', 'UI Developer', 'UX Engineer',
    'Web Application Developer', 'Full Stack Engineer',
    'MERN Stack Developer', 'MEAN Stack Developer',
    'LAMP Stack Developer', 'DevOps Engineer',
    'Site Reliability Engineer', 'SRE',
    'Embedded Software Engineer',
    'Laravel Developer',
    'Next.js Developer', 'React Developer',
    'Vue.js Developer', 'Django Developer',
    'Express.js Developer'
}

TECH_SKILLS = {
    'JavaScript', 'TypeScript', 'Python', 'PHP', 'HTML', 'CSS',
    'Tailwind CSS', 'Bootstrap', 'React', 'Next.js', 'Vue.js',
    'Laravel', 'Express', 'Django', 'MySQL', 'PostgreSQL',
    'MongoDB', 'Git', 'GitHub', 'GitLab', 'Bitbucket',
    'REST API', 'AWS', 'Azure', 'Google Cloud', 'Docker',
    'CI/CD', 'Jest', 'Mocha', 'PHPUnit', 'Cypress',
    'Authentication', 'Authorization', 'Encryption',
    'Data Structures', 'Algorithms'
}

SOFT_SKILLS = {
    'Problem-Solving', 'Analytical Thinking', 'Communication',
    'Teamwork', 'Collaboration', 'Time Management',
    'Attention to Detail', 'Adaptability', 'Creativity'
}

# Combine all skills for the job model
ALLOWED_SKILLS = TECH_SKILLS.union(SOFT_SKILLS)

# Add this after DEFAULT_AUTO_FIELD setting

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}

# Celery Beat Schedule
CELERY_BEAT_SCHEDULE = {
    'fetch-jobs-every-5-minutes': {
        'task': 'jobs.tasks.fetch_and_save_jobs',
        'schedule': 300.0,  # 5 minutes
    },
}

# Celery Beat Settings
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Add this after the existing settings

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'jobs': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'celery': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:5000",
    "http://127.0.0.1:5000",

]

CORS_ALLOW_CREDENTIALS = True

# Optional: For development only
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]
